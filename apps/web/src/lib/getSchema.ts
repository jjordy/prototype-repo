// this is automatically generated by prisma
// @ts-expect-error
import schema from "@jjordy/data/json-schema.json";
import { JSONFormSchema } from "@jjordy/form-schema";
type Options = {
  omit?: string[];
  mutate?: (key: string, values: JSONFormSchema) => JSONFormSchema;
};

export const titleCase = (s: string) =>
  s
    .replace(/^[-_]*(.)/, (_, c) => c.toUpperCase()) // Initial char (after -/_)
    .replace(/[-_]+(.)/g, (_, c) => " " + c.toUpperCase());

export default function getSchema(model: string, options?: Options) {
  let $schema = {
    $schema: schema.$schema,
    definitions: schema.definitions,
    properties: undefined,
  };
  if (schema.definitions?.[model]?.properties) {
    if (options && options.omit) {
      const mutable = { ...schema.definitions?.[model]?.properties };
      Object.keys(mutable).forEach((key) => {
        if (options.omit?.includes(key)) {
          delete mutable[key];
        } else if (options.mutate) {
          mutable[key] = options.mutate(key, mutable[key]);
        }
      });
      $schema.properties = mutable;
      return $schema;
    }
    $schema.properties = schema.definitions?.[model]?.properties;

    return $schema;
  }
  return null;
}
