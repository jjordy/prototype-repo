// this is automatically generated by prisma
// @ts-expect-error
import schema from "@jjordy/data/json-schema.json";
import { JSONFormSchema } from "@jjordy/form-schema";
type Options = {
  omit?: string[];
  mutate?: (key: string, values: JSONFormSchema) => JSONFormSchema;
  add?: Record<string, JSONFormSchema>;
};

const titleCase = (s: string) =>
  s
    .replace(/^[-_]*(.)/, (_, c) => c.toUpperCase()) // Initial char (after -/_)
    .replace(/[-_]+(.)/g, (_, c) => " " + c.toUpperCase());

type MutationFnProps = {
  mutable: Record<string, any>;
  key: string;
  options?: Options;
};

function mutateTitle({ key, mutable }: MutationFnProps) {
  const title = titleCase(key);
  // by default our schema wont have a title
  if (!mutable?.[key]?.title) {
    mutable[key].title = title;
  }
  return schema;
}

function mutateErrorMessage({ mutable, key }: MutationFnProps) {
  if (!mutable[key].errorMessage) {
    mutable[key].errorMessage = `${mutable[key].title} required`;
  }
  return schema;
}

function mutateIsNotEmpty({ mutable, key }: MutationFnProps) {
  if (!Array.isArray(mutable[key].type)) {
    mutable[key].isNotEmpty = true;
  }
  return schema;
}

function mutateOmissions({ mutable, key, options }: MutationFnProps) {
  if (options && options.omit?.includes(key)) {
    // delete the omissions from the returned schema
    delete mutable[key];
  } else if (options && options.mutate) {
    mutable[key] = options.mutate(key, mutable[key]);
  }
}

function mutateAdditions({ mutable, key, options }: MutationFnProps) {
  if (options && options.add) {
    Object.keys(options.add).map((key) => {
      mutable[key] = options.add?.[key];
    });
  }
}

const MUTATIONS = [
  mutateTitle,
  mutateErrorMessage,
  mutateIsNotEmpty,
  mutateOmissions,
  mutateAdditions,
];

function runMutations(props: MutationFnProps) {
  MUTATIONS.forEach((mutationFn) => mutationFn(props));
}
/**
 * The purpose of this function is to take our base json schema
 * provided by prisma and add the necessary additions that
 * react-hook-form-schema requires
 */
export default function getSchema(model: string, options?: Options) {
  let $schema = {
    $schema: schema.$schema,
    definitions: schema.definitions,
    properties: undefined,
  };
  if (schema.definitions?.[model]?.properties) {
    // create a mutable variable that we can work with for our form properties.
    const mutable = { ...schema.definitions?.[model]?.properties };
    Object.keys(mutable).forEach((key) =>
      runMutations({ mutable, key, options })
    );
    $schema.properties = mutable;
    return $schema;
  }
  return null;
}
